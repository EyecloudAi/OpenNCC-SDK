{"remainingRequest":"D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!D:\\gitlab\\openncc\\SDK\\docs\\docs\\nccview.md?vue&type=template&id=5ebefa10&","dependencies":[{"path":"D:\\gitlab\\openncc\\SDK\\docs\\docs\\nccview.md","mtime":1623996902509},{"path":"D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1625195650434},{"path":"D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1625196073566},{"path":"D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1625195650434},{"path":"D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\vue-loader\\lib\\index.js","mtime":1625196073566},{"path":"D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":1625195650233}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMS1vdmVydmlldyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjXzEtb3ZlcnZpZXciIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDEuIE92ZXJ2aWV3IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAi4oCDT3Blbk5DQyBWaWV3IGlzIGEgc29mdHdhcmUgdXNlZCB0byBxdWlja2x5IGV4cGVyaWVuY2UgdGhlIE9wZW5OQ0MgY2FtZXJhIGRldmVsb3BtZW50IGtpdCAoQ0RLKS4gVGhlIGRlZmF1bHQgbW9kZWwgdW5kZXIgT3Blbk5DQyBWaWV3IGRvZXMgbm90IGRlcGVuZCBvbiBPcGVuVklOTy4gT3Blbk5DQyBWaWV3IGludGVncmF0ZXMgYWxsIEFQSXMgb2YgTkNDIENESywgcmVhbGl6ZXMgY29ubmVjdGlvbiB0byBPcGVuTkNDLCBkb3dubG9hZHMgb2YgZmlybXdhcmUgYW5kIEFJIG1vZGVscywgdmlkZW8gc3RyZWFtIGRpc3BsYXksIGFuZCBwb3N0LXByb2Nlc3Npbmcgb2YgYWxnb3JpdGhtIHJlc3VsdHMuIFVzZXJzIGNhbiBvcGVyYXRlIGFuZCBjb250cm9sIHRoZSBjYW1lcmEgdGhyb3VnaCBhIGZyaWVuZGx5IGludGVyZmFjZS5cbiIKICAgICAgICApLAogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6ICIvb3Blbm5jYy9kb2NpbWcvdmlld19maWd1cmUxLnBuZyIsIGFsdDogIkZpZ3VyZS0xIiB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzItc3VwcG9ydC1wbGF0Zm9ybSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjXzItc3VwcG9ydC1wbGF0Zm9ybSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDIuU3VwcG9ydCBwbGF0Zm9ybSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJPUzogVWJ1bnR1MTYuMDQgKDY0IGJpdCksIFVidW50dTE4LjA0ICg2NCBiaXQpIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfMy1zdGFydC1vcGVubmNjLXZpZXciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI18zLXN0YXJ0LW9wZW5uY2MtdmlldyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIDMuU3RhcnQgT3Blbk5DQyBWaWV3IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiMy4xIERvd25sb2FkIHRoZSBPcGVuTkNDIENESyB0b29sa2l0LCBjbGljayB0byBkb3dubG9hZFxuMy4yIE9wZW4gdGhlIE9wZW5OQ0MgdG9vbGtpdCwgcnVuIHRoZSBpbnN0YWxsX05DQ191ZGV2X3J1bGVzLnNoIHNjcmlwdCBpbiB0aGUgVG9vbHMvZGVwbG95bWVudCBkaXJlY3RvcnkgdW5kZXIgdGhlIE9wZW5OQ0MgQ0RLIHBhY2thZ2UsIGFuZCBlbnRlciBpbiB0aGUgY29tbWFuZCB0ZXJtaW5hbDoiCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIiRzdWRvIC4vaW5zdGFsbF9OQ0NfdWRldl9ydWxlcy5zaCIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxudG8gb2J0YWluIHRoZSBwZXJtaXNzaW9uIHRvIG1vdW50IHRoZSBPcGVuTkNDIGNhbWVyYSBhdXRvbWF0aWNhbGx5LCBhbmQgdGhlbiByZXN0YXJ0IHRoZSBjb21wdXRlci4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG4zLjMgR28gdG8gdGhlIE5DQ19WaWV3IGRpcmVjdG9yeSB1bmRlciB0aGUgQ0RLIGFuZCB1bnppcCB0aGUgZmlsZTp1bnppcCB4eHguemlwLEVudGVyIHRoZSB1bnppcHBlZCBmb2xkZXIsIGVudGVyIHRoZSBjb21tYW5kIGluIHRoZSB0ZXJtaW5hbDoiCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoIiQgLi9PcGVuTkNDIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5PcGVuIHRoZSBPcGVuTkNDIFZpZXcgaW50ZXJmYWNlLGlmIHRoZSBvcGVyYXRpb24gZmFpbHMsIHlvdSBjYW4gdHJ5OiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiJCBzdWRvIC4vT3Blbk5DQyIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIk9wZW5OQ0MgVmlldyBpbnRlcmZhY2XvvJoiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsgc3JjOiAiL29wZW5uY2MvZG9jaW1nL3poL3ZpZXcucG5nIiwgYWx0OiAiRmlndXJlLTIiIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfNC1nZXR0aW5nLXN0YXJ0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfNC1nZXR0aW5nLXN0YXJ0IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgNC5HZXR0aW5nIHN0YXJ0IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAi4oCDQWZ0ZXIgT3Blbk5DQyBWaWV3IGlzIHN1Y2Nlc3NmdWxseSBsYXVuY2hlZCwgeW91IGNhbiB0aGVuIG9wZXJhdGUgdGhlIGludGVyYWN0aW9uIGJldHdlZW4gdGhlIGNhbWVyYSBhbmQgT3Blbk5DQyBWaWV3LiBUaGUgc3RlcHMgYXJlIGFzIGZvbGxvd3M6IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiYS4gQ29ubmVjdCB0aGUgT3Blbk5DQyBjYW1lcmEgdG8gdGhlIFVTQjMuMCBpbnRlcmZhY2Ugb2YgdGhlIGNvbXB1dGVyLCBjbGljayB0aGUgR2V0IGRldmljZSBpbmZvIGJ1dHRvbiB0byBnZXQgdGhlIGRldmljZSBpbmZvcm1hdGlvbiwgYW5kIHRoZSBkZXZpY2UgaW5mb3JtYXRpb24gd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIGxvZyBhcmVhLiBJZiB0aGUgY29ubmVjdGlvbiBpcyBub3QgMy4wLCBwbGVhc2Ugcm90YXRlIHRoZSBkYXRhIGxpbmUgY29ubmVjdGVkIHRvIHRoZSBPcGVuTkNDIGNhbWVyYSBUeXBlLUMgaW50ZXJmYWNlIGJ5IDE4MMKwIEluc2VydCBpdCBhZ2FpbiBhbmQgY2xpY2sgdGhlIEdldCBkZXZpY2UgaW5mbyBidXR0b24gdG8gZ2V0IHRoZSBkZXZpY2UgaW5mb3JtYXRpb24uIE1ha2Ugc3VyZSB0aGF0IHRoZSBsb2cgc2hvd3M6IFVTQiBpbnRlcmZhY2UgaXMgMy4wLiBJZiB0aGUgZGlzcGxheSBpcyBub3QgMy4wLCBpdCBjYW4gYmUgdXNlZCBub3JtYWxseSwgYnV0IHRoZSB0cmFuc2ZlciByYXRlIHdpbGwgZHJvcC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJiLiBDaG9vc2UgYW55IG91dHB1dCBmb3JtYXQgeXV2NDIwcC9ILjI2NC9tanBlZywgdGhlIGRlZmF1bHQgcmVzb2x1dGlvbiBpcyAxMDgwcC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICdjLiBDbGljayB0byBsb2FkIHRoZSBtb2RlbCAiMXN0IG5ldHdvcmsiIG1vZGU6IHNlbGVjdCB0aGUgYWxnb3JpdGhtIG1vZGVsLCBjdXJyZW50bHkgc3VwcG9ydHMgbW9yZSB0aGFuIDEwIG1vZGVscyB0byBjaG9vc2UgZnJvbSwgc2VsZWN0IE5vbmUgdG8gbm90IGxvYWQgdGhlIG1vZGVsLCBvbmx5IGRpc3BsYXkgdGhlIHZpZGVvIHN0cmVhbS4gQWZ0ZXIgY2hvb3NpbmcgdG8gbG9hZCB0aGUgYWxnb3JpdGhtIG1vZGVsLCB5b3UgY2FuIGZyYW1lIHRoZSBST0kgYXJlYS4gQWZ0ZXIgdGhlIGZyYW1lIGlzIHNlbGVjdGVkLCB0aGUgYWxnb3JpdGhtIG9ubHkgcmVjb2duaXplcyB0aGUgc2NlbmVzIGluIHRoZSBhcmVhLicKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ2QuICJNb2RlbCBTY29yZSIgaXMgdGhlIGxvd2VzdCBzY29yZSByZWNvZ25pemVkIGJ5IHRoZSBhbGdvcml0aG0uIEFib3ZlIHRoaXMgc2NvcmUsIHRoZSBhbGdvcml0aG0gd2lsbCBzZWxlY3QgdGhlIG9iamVjdCBpbiB0aGUgZnJhbWU7ICJEaXNwbGF5IFNjYWxlciIgaXMgdGhlIHNpemUgb2YgdGhlIHZpZGVvIGRpc3BsYXkgd2luZG93LiBLZWVwIHRoZSBkZWZhdWx0IHZhbHVlLiBBZnRlciBjbGlja2luZyB0aGUgIlN0YXJ0IHJ1bm5pbmcgbW9kZWwiIGJ1dHRvbiwgTG9hZCB0aGUgYWxnb3JpdGhtIG1vZGVsIGFuZCBzdWNjZXNzZnVsbHkgb3BlbiB0aGUgdmlkZW8gc3RyZWFtLlxuU29mdHdhcmUgc2NyZWVuc2hvdDogQWZ0ZXIgcnVubmluZyB0aGUgdmlkZW8gc3RyZWFtIGFuZCBsb2FkaW5nIHRoZSBmYWNlIGRldGVjdGlvbiBhbGdvcml0aG0gc3VjY2Vzc2Z1bGx5LicKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6ICIvb3Blbm5jYy9kb2NpbWcvemgvZmFjZS1kZXRlY3Rpb24ucG5nIiwKICAgICAgICAgICAgYWx0OiAiRmlndXJlLTMiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiXzUtbW9kZWwtYW5hbHlzaXMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI181LW1vZGVsLWFuYWx5c2lzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgNS5Nb2RlbCBhbmFseXNpcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIuKAg0FmdGVyIHRoZSBtb2RlbCBpcyBkZWR1Y2VkIGJ5IE9wZW5OQ0MsIHRoZSByZWFsLXRpbWUgZGVkdWN0aW9uIHJlc3VsdCBpcyBvYnRhaW5lZCB0aHJvdWdoIHRoZSBPcGVuTkNDIENESyBBUEkuIE9wZW5OQ0MgVmlldyBpbXBsZW1lbnRzIGEgZ2VuZXJhbCBwYXJzZXIgZm9yIHRoZSBkZWR1Y3Rpb24gcmVzdWx0IGZvciBPYmplY3QgRGV0ZWN0aW9uIE1vZGVscy4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG7igINPcGVuTkNDIFZpZXcgUG9zdC1pbmZlcmVuY2UgcHJvY2Vzc2luZyBzdXBwb3J0cyBvdXRwdXQgaW4gdGhlIGZvbGxvd2luZyBmb3JtYXRzOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIlRoZSBvdXRwdXQgZGF0YSBmb3JtOlsxLCAxLCBOLCA3XSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTiBpcyB0aGUgbnVtYmVyIG9mIG9iamVjdCBmcmFtZXMgZGV0ZWN0ZWQgaW4gdGhlIGN1cnJlbnQgZnJhbWUiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRm9yIGVhY2ggZGV0ZWN0aW9uIGZyYW1lICxjb250YWlucyB0aGUgZm9sbG93aW5nIGluZm9ybWF0aW9uIGZvcm1hdDoiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJbaW1hZ2VfaWQswqBsYWJlbCzCoGNvbmYswqB4X21pbizCoHlfbWluLMKgeF9tYXgswqB5X21heF06IikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJpbWFnZV9pZMKgLSBJRCBvZiB0aGUgaW1hZ2UgaW4gdGhlIGJhdGNoIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJsYWJlbMKgLSBwcmVkaWN0ZWQgY2xhc3MgSUQiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoImNvbmbCoC0gY29uZmlkZW5jZSBmb3IgdGhlIHByZWRpY3RlZCBjbGFzcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiKHhfbWluLMKgeV9taW4pIC0gY29vcmRpbmF0ZXMgb2YgdGhlIHRvcCBsZWZ0IGJvdW5kaW5nIGJveCBjb3JuZXIiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiKHhfbWF4LMKgeV9tYXgpIC0gY29vcmRpbmF0ZXMgb2YgdGhlIGJvdHRvbSByaWdodCBib3VuZGluZyBib3ggY29ybmVyLiIKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlxu4oCDVXNlcnMgY2FuIHRyYWluIHRoZWlyIG93biBtb2RlbHMgYW5kIGRlZmluZSB0aGUgb3V0cHV0IGxheWVyIGFjY29yZGluZyB0byB0aGUgYWJvdmUgZm9ybWF0LCBhbmQgY2FuIHVzZSB0aGUgbW9kZWwgaW1wb3J0IGZ1bmN0aW9uIG9mIE9wZW5OQ0MgVmlldyB0byBhZGQgb2JqZWN0IGRldGVjdGlvbiBtb2RlbHMgd2l0aG91dCBwcm9ncmFtbWluZy4gSWYgdXNlcnMgbmVlZCB0byBhZGQgbW9kZWxzIGluIG90aGVyIG91dHB1dCBmb3JtYXRzLFlvdSBuZWVkIHRvIHJlZmVyIHRvIHRoZSBkZW1vIGluIG5jY19jZGsvU2FtcGxlcy9Ib3dfdG8vbG9hZCBhIG1vZGVsIGFuZCB3cml0ZSBwb3N0LXByb2Nlc3NpbmcgY29kZSBpbiBjb21iaW5hdGlvbiB3aXRoIHlvdXIgb3duIGFwcGxpY2F0aW9uIHNjZW5hcmlvLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJfNi1mdW5jdGlvbnMtZGV0YWlsIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNfNi1mdW5jdGlvbnMtZGV0YWlsIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgNi5GdW5jdGlvbnMgZGV0YWlsIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIjYuMSkgR2V0IERldmljZSBJbmZv77yaIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuT2J0YWluIHRoZSBVU0IgY29ubmVjdGlvbiBpbmZvcm1hdGlvbiBvZiB0aGUgZGV2aWNlIGFuZCB0aGUgY29tcHV0ZXIsIGFuZCB0aGUgTkNDIGRldmljZSBtb2R1bGUgaW5mb3JtYXRpb24uIElmIHRoZSBjb25uZWN0ZWQgZGV2aWNlIHN1cHBvcnRzIGl0LCB5b3UgY2FuIHVubG9jayBtb3JlIGZ1bmN0aW9uYWwgb3B0aW9ucy4gKEZvciBleGFtcGxlLCBpZiBOQ0MgaXMgY29ubmVjdGVkIHRvIGEgY29tcHV0ZXIgdmlhIFVTQiAzLjAsIHlvdSBjYW4gdW5sb2NrIHRoZSB5dXYgb3V0cHV0IGZvcm1hdDsgaWYgTkNDIGlzIGVxdWlwcGVkIHdpdGggYSA0SyBtb2R1bGUsIHlvdSBjYW4gdW5sb2NrIHRoZSA0SyByZXNvbHV0aW9uIGRpc3BsYXkpIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCJcbjYuMu+8iVN0cmVhbSBGb3JtYXTvvJoiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5DaG9vc2UgTkNDIGNhbWVyYSBVU0IgdmlkZW8gb3V0cHV0IGZvcm1hdCwgY3VycmVudGx5IHN1cHBvcnRzIFlVVjQyMFAsIEguMjY0LCBNSlBFRyBmb3JtYXQuIChZb3UgbmVlZCB0byBjbGljayBHZXQgRGV2aWNlIEluZm8gYmVmb3JlIHNlbGVjdGluZyBZVVY0MjBQLCB3aGljaCBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIFVTQiAzLjAgaXMgY29ubmVjdGVkKSIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiXG42LjPvvIlTdHJlYW0gUmVzb2x1dGlvbu+8miIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkNoYW5nZSB0aGUgdmlkZW8gcmVzb2x1dGlvbiBvZiBOQ0MgY2FtZXJhLCAxMDgwUCBvciA0SyBjYW4gYmUgc2VsZWN0ZWQuIDRLIHJlc29sdXRpb24gc3VwcG9ydCByZXF1aXJlcyBvcHRpb25hbCA0SyBjYW1lcmEgbW9kdWxlLiAoR2V0IERldmljZSBJbmZvIGJlZm9yZSBzZWxlY3RpbmcgNEssIG9ubHkgYXZhaWxhYmxlIGlmIHRoZSBtb2R1bGUgc3VwcG9ydHMgNEspIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCJcbjYuNO+8iTFzdMKgbmV0d29ya8KgbW9kZWzvvJoiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5TZWxlY3QgdGhlIGFsZ29yaXRobSBtb2RlbCwgc2VsZWN0IE5vbmUgdG8gbm90IGxvYWQgdGhlIG1vZGVsLCBhbmQgb25seSBkaXNwbGF5IHRoZSB2aWRlbyBzdHJlYW0uIEFmdGVyIHNlbGVjdGluZyB0aGUgYWxnb3JpdGhtIG1vZGVsIHRvIGxvYWQsIHlvdSBjYW4gc2VsZWN0IHRoZSBST0kgYXJlYSBieSBmcmFtZSB0byBpZGVudGlmeSBvbmx5IHRoZSBzY2VuZXMgaW4gdGhlIGFyZWEuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCJcbjYuNe+8iU1vZGVsIFNjb3Jl77yaIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuQWZ0ZXIgbG9hZGluZyB0aGUgbW9kZWwsIHRoZSByZWNvZ25pdGlvbiBjYWxjdWxhdGlvbiByZXN1bHQgb2YgdGhlIGl0ZW0gaXMgc2NvcmVkLiBXaGVuIGl0IGV4Y2VlZHMgYSBjZXJ0YWluIHNjb3JlIHRocmVzaG9sZCwgaXQgd2lsbCBiZSBmcmFtZWQgaW4gdGhlIHZpZGVvLCBhbmQgdGhlIE1vZGVsIFNjb3JlIGlzIHRoZSBvcHRpb24gdG8gY29udHJvbCB0aGUgdGhyZXNob2xkLiBUaGUgbWluaW11bSBzY29yZSBvZiB0aGUgcmVjb2duaXRpb24gY2FuIGJlIGFkanVzdGVkIGFjY29yZGluZyB0byB1c2VyIG5lZWRzLiAoVGhlIGRlZmF1bHQgdmFsdWUgaXMgMC41KSIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiXG42LjbvvIlST0nvvJoiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5Vc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIGFsZ29yaXRobSBtb2RlbC4gQWZ0ZXIgbG9hZGluZyB0aGUgbW9kZWwsIGlmIHlvdSBuZWVkIHRvIHBlcmZvcm0gYWxnb3JpdGhtIGlkZW50aWZpY2F0aW9uIG9ubHkgZm9yIGEgY2VydGFpbiBhcmVhLCB5b3UgY2FuIG1hbnVhbGx5IHNlbGVjdCB0aGUgYXJlYSBvZiBpbnRlcmVzdCBhbmQgb25seSBpZGVudGlmeSB0aGUgc2NlbmVzIGluIHRoZSBhcmVhLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiXG42LjfvvIlEaXNwbGF5IFNjYWxlcu+8miIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbldoZW4gdGhlIHZpZGVvIHN0cmVhbSBpcyBkaXNwbGF5ZWQsIGR1ZSB0byB0aGUgZGlmZmVyZW50IHJlc29sdXRpb25zIG9mIGRpZmZlcmVudCBjb21wdXRlcnMsIGlmIHRoZSAxMDgwUCBvciA0SyB2aWRlbyBpcyBkaXNwbGF5ZWQgYXQgdGhlIG9yaWdpbmFsIHNpemUsIHRoZSB2aWRlbyBzaXplIG1heSBleGNlZWQgdGhlIGRlc2t0b3Agc2l6ZS4gVGhlIHVzZXIgY2FuIGNvbnRyb2wgdGhlIHZpZGVvIGRpc3BsYXkgd2luZG93IHNpemUgaW4gcmVhbCB0aW1lIHRocm91Z2ggdGhlIERpc3BsYXkgU2NhbGVyIChkZWZhdWx0IHZhbHVlIDAuNSkiCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIlxuNi4477yJQWRkIG1vZGVs77yaIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgJ1xuQ2xpY2sgImFkZCBtb2RlbCIgdG8gaW1wb3J0IHRoZSBnZW5lcmF0ZWQgLmJsb2IgbW9kZWwgZmlsZS4gTm90ZSBoZXJlIHRoYXQgeW91IG5lZWQgdG8gcHV0IHRoZSAuYmxvYiBmaWxlIGFuZCB0aGUgY29ycmVzcG9uZGluZyBJUiBmaWxlICgueG1sJiYuYmluKSBpbiB0aGUgc2FtZSBsb2NhdGlvbiBhbmQgd2l0aCB0aGUgc2FtZSBmaWxlIG5hbWUuIFJlZmVyIHRvIHRoZSDigJxPcGVuTkNDIFNvZnR3YXJlIE1hbnVhbC5kb2N44oCdIGZvciBnZW5lcmF0aW5nIC5ibG9iIGZpbGVzLiBBZnRlciBhZGRpbmcsIHlvdSBjYW4gc2VsZWN0IHRoZSBjb3JyZXNwb25kaW5nIG1vZGVsIGluIDFzdCBuZXR3b3JrLicKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiXG42LjnvvIlEZWwgbW9kZWzvvJoiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5EZWxldGUgdGhlIG1vZGVsIGZpbGUgaW1wb3J0ZWQgYnkgdGhlIHVzZXIsIGFuZCBpdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIDFzdCBuZXR3b3JrIG1vZGVsIGFmdGVyIGRlbGV0aW9uIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCJcbjYuMTDvvIlTdGFydMKgcnVubmluZ8KgbW9kZWzvvJoiKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5DbGljayB0byBzdGFydCBsb2FkaW5nIGZpcm13YXJlIGFuZCBtb2RlbCwgYW5kIGRpc3BsYXkgdmlkZW8gd2luZG93IGFjY29yZGluZyB0byB1c2VyJ3Mgb3B0aW9ucyIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiXG42LjEx77yJTG9n77yaIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuRGlzcGxheSB0aGUgbG9nIG9mIE9vZW5OQ0MgREsgd29ya2luZywgdGhlIHVzZXIgY2FuIHZpZXcgdGhlIHJ1bm5pbmcgc3RhdHVzIG9mIHRoZSBkZXZpY2UsIGFuZCB0aGUgcHJvbXB0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBhYm5vcm1hbCBzdGF0ZSBvZiB0aGUgZGV2aWNlIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCJcbjYuMTLvvIlBbGdvwqBSZXN1bHRz77yaIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuRGlzcGxheSB0aGUgYWxnb3JpdGhtIHJlc3VsdC4gV2hlbiB0aGUgdXNlciBjaG9vc2VzIHRvIGxvYWQgdGhlIGFsZ29yaXRobSBtb2RlbCwgYW5kIHRoZSBhbGdvcml0aG0gcmVjb2duaXplcyBhbiBvYmplY3QgaW4gdGhlIHNjZW5lLCB0aGUgYWxnb3JpdGhtIHJlc3VsdCB3aWxsIGJlIHByaW50ZWQgaGVyZSAoc3VjaCBhcyB0aGUgY29vcmRpbmF0ZSBpbmZvcm1hdGlvbiBvZiB0aGUgaWRlbnRpZmllZCBtb2RlbCByZWxhdGl2ZSB0byB0aGUgY3VycmVudCB3aW5kb3csIGFuZCB0aGUgcmVjb2duaXRpb24gc2NvcmUgY2FsY3VsYXRlZCBieSB0aGUgYWxnb3JpdGhtLCBldGMuICkiCiAgICAgICAgKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}