{"remainingRequest":"D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!D:\\gitlab\\openncc\\SDK\\docs\\docs\\Software_Manual.md?vue&type=template&id=3ac51162&","dependencies":[{"path":"D:\\gitlab\\openncc\\SDK\\docs\\docs\\Software_Manual.md","mtime":1623996902508},{"path":"D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1625195650434},{"path":"D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1625196073566},{"path":"D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1625195650434},{"path":"D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\vue-loader\\lib\\index.js","mtime":1625196073566},{"path":"D:\\gitlab\\openncc\\SDK\\docs\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":1625195650233}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}